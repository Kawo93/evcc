// Code generated by "enumer -type=ChargeMode"; DO NOT EDIT.

//
package api

import (
	"fmt"
)

const _ChargeModeName = "OffNowMinPV"

var _ChargeModeIndex = [...]uint8{0, 3, 6, 9, 11}

func (i ChargeMode) String() string {
	if i < 0 || i >= ChargeMode(len(_ChargeModeIndex)-1) {
		return fmt.Sprintf("ChargeMode(%d)", i)
	}
	return _ChargeModeName[_ChargeModeIndex[i]:_ChargeModeIndex[i+1]]
}

var _ChargeModeValues = []ChargeMode{0, 1, 2, 3}

var _ChargeModeNameToValueMap = map[string]ChargeMode{
	_ChargeModeName[0:3]:  0,
	_ChargeModeName[3:6]:  1,
	_ChargeModeName[6:9]:  2,
	_ChargeModeName[9:11]: 3,
}

// ChargeModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChargeModeString(s string) (ChargeMode, error) {
	if val, ok := _ChargeModeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ChargeMode values", s)
}

// ChargeModeValues returns all values of the enum
func ChargeModeValues() []ChargeMode {
	return _ChargeModeValues
}

// IsAChargeMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ChargeMode) IsAChargeMode() bool {
	for _, v := range _ChargeModeValues {
		if i == v {
			return true
		}
	}
	return false
}
